services:
  web: &backend
    container_name: 'app'
    build: .
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
      - mailhog
      - redis
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /app
        - action: rebuild
          path: uv.lock

  celery:
    << : *backend
    container_name: 'celery_worker'
    command: ./scripts/celery/run_celery_worker.sh
    ports: []
    develop:
      watch:
        - action: sync+restart
          path: ./backend
          target: /app

  celery_beat:
    << : *backend
    container_name: 'celery_beat'
    command: ./scripts/celery/run_celery_beat.sh
    ports: []
    develop:
      watch:
        - action: sync+restart
          path: ./backend
          target: /app

  flower:
    build: .
    container_name: 'flower'
    command: ./scripts/celery/run_flower.sh
    depends_on:
      - celery
    environment:
      CELERY_BROKER: ${CELERY_BROKER}
      CELERY_BACKEND: ${CELERY_BACKEND}
    ports:
      - 5555:5555

  db:
    image: postgres:15
    container_name: 'django-db'
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"

  mailhog:
    image: mailhog/mailhog
    container_name: 'mailhog'
    logging:
      driver: 'none'
    ports:
      - "${EMAIL_PORT}:1025"
      - "8025:8025"

  redis:
    image: redis:latest
    container_name: 'redis'
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}

volumes:
  postgres_data:
  redis_data:
